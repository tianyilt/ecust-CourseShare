创建Django网站步骤：1、建立项目；2、创建应用程序；3、创建网页；4、管理用户；5、部署上线。

1	创建项目
1.1	建立并激活虚拟环境
1.1.1	在cmd中执行命令：pip install pipenv
1.1.2	创建工作文件夹（learning），切换到工作文件夹
1.1.3	创建虚拟环境：pipenv install（会自动生成两个文件）
1.1.4	激活虚拟环境：pipenv shell

1.2	在虚拟环境中安装Django：pip install django

1.3	创建项目（learning_log）：django-admin startproject learning_log .
注意：空格+.很重要；会自动生成manage.py文件及项目名称命名的文件夹（文件夹中有几个非常重要的文件）

1.4	创建数据库：python manage.py migrate
注意：数据库类型及名称（learning.sqlite）可在项目文件夹下的settings.py文件设置

1.5	启动服务器并查看项目：python manage.py runserver（或者：python manage.py runserver 0.0.0.0:8000，同时修改settings.py：ALLOWED_HOSTS = ['*']）
访问：http://127.0.0.1:8000（再试试：http://127.0.0.1:8000/admin）

1.6	新打开一个cmd窗口，切换到网站工作文件夹，激活虚拟环境，创建超级用户：python manage.py createsuperuser
说明：邮箱地址可以不输入，密码输入时看不到显示

2	创建应用程序
2.1	创建应用程序
2.1.1	创建应用程序（learning_logs）：python manage.py startapp learning_logs
会自动生成应用程序名称命名的文件夹（文件夹中有几个非常重要的文件）
2.1.2	修改项目文件夹下文件settings.py，在变量INSTALLED_APPS中加入应用程序（learning_logs）

2.2	定义并激活模型
2.2.1	定义模型
修改应用程序文件夹下文件models.py，在最后添加代码：
class Topic(models.Model):
    text=models.CharField(max_length=200)
    date_added=models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return self.text
2.2.2	激活并迁移模型
python manage.py makemigrations learning_logs
python manage.py migrate

2.3	访问管理网站
访问：http://127.0.0.1:8000/admin
2.3.1	向管理网站注册模型
修改应用程序文件夹下文件admin.py，在最后添加代码：
from learning_logs.models import Topic
admin.site.register(Topic)
2.3.2	添加主题

2.4	定义并迁移更多模型
2.4.1	定义模型
修改应用程序文件夹下文件models.py，在最后添加代码：
class Entry(models.Model):
    topic=models.ForeignKey(Topic,on_delete=models.CASCADE)
    text=models.TextField()
    date_added=models.DateTimeField(auto_now_add=True)

    class Meta:
        verbose_name_plural='entries'

    def __str__(self):
        if len(self.text)>50:
            return self.text[:50]+'...'
        else:
            return self.text
2.4.2	再次迁移模型
2.4.3	再次向管理网站注册模型（在实际应用中，一次完成所有模型的定义，一次完成迁移，一次完成注册）

3	创建网页
创建客户端网页三个步骤：映射URL（即规定各网址由哪些视图函数处理）、编写视图（定义网页内容或者指定网页模板）、编写模板（定义网页内容，支持Python和Django代码）
3.1	映射URL
3.1.1规定了应用程序各网址由哪些视图函数处理；3.1.2规定了项目内各应用程序的二级网址及由哪个urls.py处理映射
3.1.1	在应用程序文件夹下创建新文件urls.py
'''定义learning_logs的URL模式'''
from django.urls import re_path
from . import views

app_name='learning_logs'
urlpatterns=[
    #主页
    re_path(r'^$',views.index,name='index'),
    ]
3.1.2	修改项目文件夹下文件urls.py
from django.contrib import admin
from django.urls import include,path

urlpatterns = [
    path(r'admin/', admin.site.urls),
    path(r'',include('learning_logs.urls',namespace='learning_logs')),
]

3.2	编写视图
修改应用程序文件夹下文件views.py，在最后添加代码：
def index(request):
    '''学习笔记的主页'''
    return render(request,'learning_logs/index.html')

3.3	编写模板
修改settings.py：
'DIRS': [os.path.join(BASE_DIR, 'learning_logs/templates')],
注意：需要导入os模块
3.3.1	在应用程序文件夹下创建新文件夹templates，在此文件夹下创建应用程序名称文件夹，再在此文件夹下创建模板文件index.html（内容自定）
3.3.2	在浏览器中查看主页（http://127.0.0.1:8000）
3.3.3	创建父模板
在index.html所在文件夹中，创建父模板base.html，内容参照如下：
<p><a href="{% url 'learning_logs:index' %}">Learning Log</a></p>
{% block content %}{% endblock content %}
3.3.4	修改主页index.html，内容参照如下：
{% extends 'learning_logs/base.html' %}
{% block content %}
  <p>Learning Log helps you keep track of your learning,for any topic you're learning about.</p>
{% endblock content %}
3.3.5	再次查看主页
3.3.6	创建显示所有主题的网页
在urls.py中修改URL模式，增加如下内容：
    re_path(r'^topics$',views.topics,name='topics'),
修改视图文件views.py，增加如下内容：
from .models import Topic
def topics(request):
    '''显示所有的主题'''
    topics=Topic.objects.order_by('date_added')
    context={'topics':topics}
    return render(request,'learning_logs/topics.html',context)
创建显示所有主题的模板topics.html，内容参照如下：
{% extends 'learning_logs/base.html' %}
{% block content %}
  <p>Topics</p>
  <ul>
    {% for topic in topics %}
      <li>{{ topic }}</li>
    {% empty %}
      <li>No,topics have been added yet.</li>
    {% endfor %}
  </ul>
{% endblock content %}
修改父模板base.html，增加超文本Topics：
<p>
<a href="{% url 'learning_logs:index' %}">Learning Log</a> - 
<a href="{% url 'learning_logs:topics' %}">Topics</a>
</p>
3.3.7	同样方法创建显示特定主题内容的网页：修改URL模式，修改视图文件，创建模板topic.html，修改模板topics.html。
修改urls.py，增加以下内容:
    re_path(r'^topics/(?P<topic_id>\d+)/$',views.topic,name='topic'), 
修改views.py，增加以下内容:
def topic(request,topic_id):
    '''显示特定主题及其所有的条目'''
    topic=Topic.objects.get(id=topic_id)
    entries=topic.entry_set.order_by('-date_added')
    context={'topic':topic,'entries':entries}
    return render(request,'learning_logs/topic.html',context)
新建topic.html文件：
{% extends 'learning_logs/base.html' %}
{% block content %}
  <p>Topic:{{ topic }}</p>
  <p>Entries</p>
  <ul>
    {% for entry in entries %}
      <li>
        <p>{{ entry.date_added|date:'M d,Y H:i' }}</p>
        <p>{{ entry.text|linebreaks }}</p>
      </li>
    {% empty %}
      <li>There are no entries for this topic yet.</li>
    {% endfor %}
  </ul>
{% endblock content %}
修改topics.html，使每个topic成为超文本：
	......
      <li><a href="{% url 'learning_logs:topic' topic.id %}">{{ topic }}</a></li>
	......

4	管理用户
目标：1、让用户能够在前端输入数据；2、实现注册、登录及注销功能；3、保护数据安全，限制数据访问
4.1	让用户能够输入数据
4.1.1	添加主题
定义URL、编写视图函数、编写模板、导入包含表单的模块forms.py
创建一个名为forms.py的文件，存储到models.py所在的应用程序文件夹，内容如下：
from django import forms
from .models import Topic,Entry

class TopicForm(forms.ModelForm):
    class Meta:
        model=Topic
        fields=['text']
        labels={'text':''}
修改urls.py文件，增加内容：
    re_path(r'^new_topic/$',views.new_topic,name='new_topic'),
修改views.py文件，增加内容：
from django.http import HttpResponseRedirect
from django.urls import reverse
from .forms import TopicForm

def new_topic(request):
    '''添加新主题'''
    if request.method!='POST':
        #未提交数据：创建给一个新表单
        form=TopicForm()
    else:
        #POST提交的表单，对数据进行处理
        form=TopicForm(request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse('learning_logs:topics'))
    context={'form':form}
    return render(request,'learning_logs/new_topic.html',context)
创建模板new_topic.html，内容如下：
{% extends 'learning_logs/base.html' %}
{% block content %}
  <p>Add a new topic:</p>
  <form action="{% url 'learning_logs:new_topic' %}" method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button name="submit">add topic</button>
  </form>
{% endblock content %}
在topics.html的最后添加一个到new_topic.html的链接：
  <a href="{% url 'learning_logs:new_topic' %}">Add a new topic:</a>
4.1.2	添加条目
修改forms.py，添加如下内容：
class EntryForm(forms.ModelForm):
    class Meta:
        model=Entry
        fields=['text']
        labels={'text':''}
        widgets={'text':forms.Textarea(attrs={'cols':80})}
修改urls.py：
    re_path(r'^new_entry/(?P<topic_id>\d+)/$',views.new_entry,name='new_entry'),
修改views.py：
def new_entry(request,topic_id):
    '''在特定的主题中添加新条目'''
    topic=Topic.objects.get(id=topic_id)
    if request.method!='POST':
        #未提交数据，创建一个空表单
        form=EntryForm()
    else:
        #POST提交的数据，对数据进行处理
        form=EntryForm(data=request.POST)
        if form.is_valid():
            new_entry=form.save(commit=False)
            new_entry.topic=topic
            new_entry.save()
            return HttpResponseRedirect(reverse('learning_logs:topic',args=[topic_id]))
    context={'topic':topic,'form':form}
    return render(request,'learning_logs/new_entry.html',context)
创建模板new_entry.html，内容如下：
{% extends "learning_logs/base.html" %}

{% block content %}
  <p><a href="{% url 'learning_logs:topic' topic.id %}">{{ topic }}</a></p>
  <p>Add a new entry:</p>
  <form action="{% url 'learning_logs:new_entry' topic.id %}" method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button name="submit">add entry</button>
  </form>
{% endblock content %}
修改topic.html：
  <p>Entries:</p>
  <p><a href="{% url 'learning_logs:new_entry' topic.id %}">add new entry</a></p>
  <ul>
4.1.3	编辑条目
修改urls.py：
    re_path(r'^edit_entry/(?P<entry_id>\d+)/$',views.edit_entry,name='edit_entry'),
修改views.py：
from .models import Topic,Entry
def edit_entry(request,entry_id):
    '''编辑既有条目'''
    entry=Entry.objects.get(id=entry_id)
    topic=entry.topic
    if request.method!='POST':
        #初次请求，使用当前条目填充表单
        form=EntryForm(instance=entry)
    else:
        #POST提交的数据，对数据进行处理
        form=EntryForm(instance=entry,data=request.POST)
        if form.is_valid():
            form.save()
            return HttpResponseRedirect(reverse('learning_logs:topic',args=[topic.id]))
    context={'entry':entry,'topic':topic,'form':form}
    return render(request,'learning_logs/edit_entry.html',context)
创建模板edit_entry.html，内容如下：
{% extends "learning_logs/base.html" %}

{% block content %}
  <p><a href="{% url 'learning_logs:topic' topic.id %}">{{ topic }}</a></p>
  <p>Edit entry:</p>
  <form action="{% url 'learning_logs:edit_entry' entry.id %}" method="post">
    {% csrf_token %}
    {{ form.as_p }}
    <button name="submit">save changes</button>
  </form>
{% endblock content %}
修改topic.html：
        <p>{{ entry.text|linebreaks }}</p>
        <p><a href="{% url 'learning_logs:edit_entry' entry.id %}">edit entry</a></p>
      </li>
4.2	创建用户账户
目标：允许用户注册、登录和注销；让用户拥有自己的数据；只允许用户访问自己的主题
4.2.1	创建应用程序users
创建应用程序users，将其加入到settings.py中
4.2.2	定义url、视图函数
修改users/views.py文件，增加如下内容：
from django.http import HttpResponseRedirect
from django.urls import reverse
from django.contrib.auth import login,logout,authenticate
from django.contrib.auth.forms import UserCreationForm

def logout_view(request):
    '''注销用户'''
    logout(request)
    return HttpResponseRedirect(reverse('learning_logs:index'))

def register(request):
    '''注册新用户'''
    if request.method!='POST':
        #显示空的注册表单
        form=UserCreationForm()
    else:
        #处理填写好的表单
        form=UserCreationForm(data=request.POST)

        if form.is_valid():
            new_user=form.save()
            #让用户自动登录，再重定向到主页
            authenticated_user=authenticate(username=new_user.username,password=request.POST['password1'])
            login(request,authenticated_user)
            return HttpResponseRedirect(reverse('learning_logs:index'))
        
    context={'form':form}
    return render(request,'users/register.html',context)
在users文件夹中，新建文件urls.py，内容如下：
'''为应用程序users定义URL模式'''
from django.urls import re_path,include
from django.contrib.auth.views import LoginView
from . import views

app_name='users'
urlpatterns=[
    #登录页面
    re_path(r'^login/$',LoginView.as_view(template_name='users/login.html'),name='login'),
    #注销
    re_path(r'^logout/$',views.logout_view,name='logout'),
    #注册
    re_path(r'^register/$',views.register,name='register'),
    ]
修改项目文件夹中文件urls.py，定义此应用程序的url：
    path(r'users/',include('users.urls',namespace='users')),
4.2.3	创建网页
在learning_log/learning_logs/templates/users文件夹下（需要手动创建），创建login.html文件，内容如下：
{% extends 'learning_logs/base.html' %}

{% block content %}
  {% if form.errors %}
    <p>Your username and password didn't match. Please try again.</p>
  {% endif %}
  <form action="{% url 'users:login' %}" method="post" class="form">
    {% csrf_token %}
    {{ form.as_p }}
    <button name="submit" class="btn btn-primary">log in</button>
    <input type="hidden" name="next" value="{% url 'learning_logs:index' %}"/>
  </form>
{% endblock content %}
修改base.html文件，加入注册、登录、注销链接：
<a href="{% url 'learning_logs:topics' %}">Topics</a> - 
{% if user.is_authenticated %}
  Hello,{{ user.username }}
  <a href="{% url 'users:logout' %}">log out</a>
{% else %}
  <a href="{% url 'users:register' %}">register</a> - 
  <a href="{% url 'users:login' %}">log in</a>
{% endif %}
创建register.html文件，内容如下：
{% extends 'learning_logs/base.html' %}

{% block content %}
  <form action="{% url 'users:register' %}" method="post" class="form">
    {% csrf_token %}
    {{ form.as_p }}
    <button name="submit" class="btn btn-primary">register</button>
    <input type="hidden" name="next" value="{% url 'learning_logs:index' %}"/>
  </form>
{% endblock content %}
4.3	让用户拥有自己的数据
4.3.1	使用@login_required限制访问
4.3.2	将数据关联到用户
4.3.3	只允许用户访问自己的主题
4.3.4	保护用户的主题
4.3.5	保护页面edit_entry
4.3.6	将新主题关联到当前用户
